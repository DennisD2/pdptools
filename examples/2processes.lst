       1                                            .title inbell, arthur gill page 118
       2                                        ; a bell rings every 10 seconds while main program is running
       3                                        ; check line 27 (value 600 or 500, depending on 60hz or 50hz)
       4                                        ; check line 17: i needed to comment this out, otherwise i get error vec 10 ?!?
       5 000000                                 lc=.
       6 000004                                 .=4+lc
       7 000004 000006  000000  000012                  .word    6,0,12,0           ; initialize error vectors
         000012 000000                  
       8 000100                                 .=100+lc
       9 000100 000570  000300                          .word    inthnd,300         ; initialize interrupt vector
      10 000500                                 .=500+lc                            ; allow for stack space
      11 000500 010706                          start:  mov     pc,sp
      12 000502 005746                                  tst     -(sp)               ; init sp to start
      13                                        ;
      14 177566                                 prdata=177566
      15 177546                                 clstat=177546
      16                                        ;
      17                                                ;;;mov     #100,@#clstat       ; set interrupt enable bit to 1
      18 000504 012737  000001  000654                  mov     #1,count            ; initialize tick count
      19 000512 012737  000000  000662                  mov     #0,pid
      20 000520 012737  000000  000660                  mov     #0,lpid
      21 000526 012737  000000  000656                  mov     #0,newch            : init newch value
      22                                        ;
      23                                        ;               (main program here)
      24 000534 005737  000656                  main:   tst     newch               ; new char flag = 0 ?
      25 000540 001001                                  bne     print               ; if not, goto print
      26 000542 000774                                  br      main                ; if yes, wait
      27 000544 062737  000101  000662          print:  add     #101,pid            ; add #100 to pid to get char value
      28 000552 013737  000662  177566                  mov     pid,@#prdata        ; print pid
      29 000560 012737  000000  000656                  mov     #0,newch            ; clear new char flag
      30 000566 000762                                  br      main                ; repeat forever
      31                                        ;
      32                                        ;               interrupt handler
      33 000570 005337  000654                  inthnd: dec     count               ; (count) = (count)-1
      34 000574 001401                                  beq     nxtpid              ; if (count)=0, goto nxtpid
      35 000576 000002                                  rti                         ; return from interrupt
      36 000600 012737  000062  000654          nxtpid: mov     #50.,count          ; set count to 1 seconds
      37 000606 012737  000001  000656                  mov     #1,newch            ; assign new char flag
      38 000614 005737  000660                          tst     lpid                ; is lpid=0?
      39 000620 001406                                  beq     strpid              ; if yes start re-init pid loop
      40 000622 005337  000660                          dec     lpid                ; if no, calc next pid
      41 000626 013737  000660  000662                  mov     lpid,pid            ; copy local to output pid
      42 000634 000002                                  rti
      43 000636 012737  000002  000660          strpid: mov     #2,lpid             ; re-init
      44 000644 013737  000660  000662                  mov     lpid,pid            ; copy local to output pid
      45 000652 000002                                  rti                         ; return from interrupt
      46                                        ;
      47 000654                                 count:  .blkw   1                   ; tick count
      48 000656                                 newch:  .blkw   1                   ; new char var.
      49 000660                                 lpid:   .blkw   1                   ; local pid in isr var.
      50 000662                                 pid:    .blkw   1                   ; pid in isr var.
      51                                
      52                                
      53                                                .end    start
      53                                
