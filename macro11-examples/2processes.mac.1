            .TITLE INBELL, ARTHUR GILL PAGE 118
        ; A BELL RINGS EVERY 10 SECONDS WHILE MAIN PROGRAM IS RUNNING
        ; check line 27 (value 600 or 500, depending on 60Hz or 50Hz)
        ; check line 17: I needed to comment this out, otherwise i get error vec 10 ?!?
        LC=.
        .=4+LC
                .WORD    6,0,12,0           ; INITIALIZE ERROR VECTORS
        .=100+LC
                .WORD    INTHND,300         ; INITIALIZE INTERRUPT VECTOR
        .=500+LC                            ; ALLOW FOR STACK SPACE
        START:  MOV     PC,SP
                TST     -(SP)               ; INIT SP TO START
        ;
        PRDATA=177566
        CLSTAT=177546
        ;
                ;;;MOV     #100,@#CLSTAT       ; SET INTERRUPT ENABLE BIT TO 1
                MOV     #1,COUNT            ; INITIALIZE TICK COUNT
                mov     #0,r2
                mov     #0,r0
                mov     #0,r1
        ;
        ;               (MAIN PROGRAM HERE)
        ; r0 is pid , set from ISR
        ; r1 is new char flag, shared with ISR
        MAIN:   TST     r1                  ; new char flag r1 = 0 ?
                bne     print               ; if not, goto print
                BR      MAIN                ; if yes, wait
        print:  ADD     #101,r0             ; r0=pid, add #100 to get char value
                MOV     r0,@#PRDATA         ; print r0
                mov     #0,r1               ; clear new char flag
                br      main                ; repeat forever
        ;
        ;               INTERRUPT HANDLER
        ; r0 is pid, shared with main
        ; r1 is new char flag, shared with main
        ; r2 is local pid value
        INTHND: DEC     COUNT               ; (COUNT) = (COUNT)-1
                beq     NXTPID              ; IF (COUNT)=0, GOTO NXTPID
                RTI                         ; RETURN FROM INTERRUPT
        NXTPID: MOV     #50.,COUNT          ; SET COUNT TO 10 SECONDS
                mov     #1,r1               ; assign new char flag
                tst     r2                  ; is r2=0?
                beq     strpid              ; if yes start re-init pid loop
                dec     r2                  ; if no, calc next pid
                mov     r2,r0               ; copy local to output pid
                rti
        strpid: mov     #2,r2               ; re-init
                mov     r2,r0               ; copy local to output pid
                RTI                         ; RETURN FROM INTERRUPT
        COUNT:  .BLKW   1                   ; TICK COUNT

                .END    START
